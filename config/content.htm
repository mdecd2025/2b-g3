<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2b  g3第幾組網站: <a href="https://mdecd2025.github.io/2b-g3">https://mdecd2025.github.io/2b-g3</a></p>
<p>2b  g3第幾組倉儲: <a href="https://github.com/mdecd2025/2b-g3">https://github.com/mdecd2025/2b-g3</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h2>repo</h2>
<p>在更新小組list的程式時，順便做的。(<a href="https://mdecd2025.github.io/hw-41223226-0/content/Brython.html?src=https://gist.githubusercontent.com/41223226-0/92b34d17b593cecf8e446c8045d37869/raw/b1dda5a2706a1237501ccef3a392040405ad2827/gistfile1.py">執行結果</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request

# 設定 URL
url = "https://mde.tw/list/2b.txt"

# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割

# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")

# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]

# **動態插入所有學員資料，並為帳號添加超連結**
for index, student in enumerate(all_stud, start=1):
    parts = student.split()  # 用空格分割學號和帳號
    if len(parts) == 2:
        student_id, account = parts
        # 設定學號的超連結
        account_link = f"https://mdecd2025.github.io/hw-{account.strip()}"
        # 設定repo的超連結
        repo_link = f"https://github.com/mdecd2025/hw-{account.strip()}"
        
        # 插入學號和帳號的超連結，並加上repo的超連結
        brython_div1 &lt;= f"{index}. " + html.A(student_id.strip(), href=account_link) + " " 
        brython_div1 &lt;= f"（" + html.A("repo", href=repo_link) + "）"
        brython_div1 &lt;= html.BR()  # 換行
    else:
        print(f"格式錯誤，跳過此行: {student}")
</pre>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/IcTQ1r1DgVc" width="400"></iframe></p>
<h1>Tasks</h1>
<p>task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作:</p>
<p>task1 (自行製作可攜程式系統)</p>
<p>task2 (使用 SSH 協定執行作業倉儲的推送)</p>
<p>task3 與 task4 則為 HW2 的內容之一</p>
<p>task3 (使用 Solvespace 建立平面四連桿系統零組件)</p>
<p>task4 (使用 Onshape 建立平面四連桿系統零組件)</p>
<p>task5 與 task6 則為 HW3 的主要內容</p>
<p>task5 (Webots Tutorial 1 ~3)</p>
<p>task6 (Webots Tutorial 4 ~6)</p>
<h2>task1</h2>
<h4><span style="background-color: #ccffff;">Portable </span><em>自行製作可攜程式系統</em></h4>
<p>目前最新的 Python 版本為 3.13.2, 利用舊版的 Python310,來建立 Python313可攜程式 </p>
<p>(為了配合 Siemens NX2312)s</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/FL9ChZgcjSk" title="" width="400"></iframe></p>
<h3>list</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mVhaFfnJ0YA" width="560"></iframe></p>
<p><a href="https://mdecd2025.github.io/hw-hyy41223228/content/Brython.html?src=https://gist.githubusercontent.com/hyy41223228/cbd3cf1ef4ac72eb323a0016ac0e9d2e/raw/10edbf9c479803eb80b97305b1dcc704247fbecb/41223228g3">g3成員</a></p>
<p><span>查找g3成員的github頁面超鏈接和作業網站超鏈接</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, window

# 定義資料來源 URL
url = "https://mde.tw/list/2b.txt"

# 定義要查找的學號列表
target_ids = ["41223226", "41223228", "41223206", "41223235", "41223227", "41223215"]

# 顯示學員總數
print("正在處理學員資料...")

# 取得 HTML 中的元素 id 為 "brython_div1"
brython_div1 = document["brython_div1"]

# 使用 JavaScript 的 fetch API 來抓取資料
def process_data(response_text):
    # 將抓取到的資料分行
    data = response_text.splitlines()

    # 跳過標題行，取得學員資料
    all_stud = data[1:]

    # 逐行處理學員資料
    for stud in all_stud:
        # 假設學員資料的格式為 "學號 學員賬號"
        student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號
        if len(student_info) == 2:  # 確保每行有學號和帳號
            student_id = student_info[0].strip()  # 學號
            student_account = student_info[1].strip()  # 學員賬號

            # 檢查學號是否在目標學號列表中
            if student_id in target_ids:
                # 創建 GitHub 和作業網站的超鏈接
                github_link = f"https://github.com/mdecd2025/hw-{student_account}"
                homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"
                
                # 顯示該學號的 GitHub 和作業網站
                brython_div1 &lt;= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結
                brython_div1 &lt;= " "  # 空格
                brython_div1 &lt;= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)
                brython_div1 &lt;= html.BR()  # 換行

# 使用 JavaScript 的 fetch API 拉取資料
window.fetch(url).then(lambda response: response.text()).then(process_data)</pre>
<p><span>查找學員github超鏈接</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document

# 定義資料來源 URL
url = "https://mde.tw/list/2b.txt"

# 讀取資料
data = open(url).readlines()

# 跳過標題行，取得學員資料
all_stud = data[1:]

# 顯示學員總數
print("總共有 " + str(len(all_stud)) + "名學員")

# 取得 HTML 中的元素 id 為 "brython_div1"
brython_div1 = document["brython_div1"]

# 逐行處理學員資料
for stud in all_stud:
    # 假設學員資料的格式為 "學號 學員賬號"
    student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號
    if len(student_info) == 2:  # 確保每行有學號和帳號
        student_id = student_info[0].strip()  # 學號
        student_account = student_info[1].strip()  # 學員賬號

        # 創建 GitHub 和作業網站的超鏈接
        github_link = f"https://github.com/mdecd2025/hw-{student_account}"
        homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"
        
        # 將學號作為 GitHub repository 的鏈接
        brython_div1 &lt;= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結
        brython_div1 &lt;= " "  # 空格
        
        # 插入作業網站的超鏈接，標題改為 "(repo)"
        brython_div1 &lt;= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)
        
        # 插入換行
        brython_div1 &lt;= html.BR()  # 換行</pre>
<p></p>
<h2>task2</h2>
<p>近端倉儲推送:</p>
<p><a href="https://youtu.be/8n1LiOqBkko">https://youtu.be/8n1LiOqBkko</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8n1LiOqBkko" width="560"></iframe></p>
<p><a href="https://youtu.be/1Y36Zis2M6E">https://youtu.be/1Y36Zis2M6E</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1Y36Zis2M6E" width="560"></iframe></p>
<p><span>建立SSH key:</span></p>
<p><span><img alt="" height="231" src="/images/螢幕擷取畫面 2025-03-25 083816.png" width="297"/></span></p>
<p><span><img alt="" height="249" src="/images/螢幕擷取畫面 2025-03-25 083834.png" width="561"/></span></p>
<h3>w3</h3>
<p><a href="https://mdecd2025.github.io/hw-hyy41223228/content/Brython.html?src=https://gist.githubusercontent.com/hyy41223228/255a206672118b55bd653c11fb0aea13/raw/b0ba68eea979eeea81da3cb67524fa73ccef3643/%25E5%2585%25A7%25E5%25AE%25B91">列出目前尚未納入分組的學員名單.</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, window

# 資料來源
url = "https://mde.tw/list/2b.txt"

# 已分組 GitHub 帳號清單
grouped_accounts = {
    '41223251', '41223211', '41223245', '41223243', 'jjjay41223212', 'leeshaowei0716',
    '41223234', '41223209', '41223205', '41223201', '41223202', '41223208-hw',
    '41223216', '41223217', '41223248', 'emma0312', '41223242', '41223203',
    '41223144', '41223235', 'RAY41223215', 'hyy41223228', '41223227', '41223206',
    '41223226-0', 'Cloud41223237', 'Yujenchuang', '41223225', 'ljg41223220',
    'supowen', 'jacky93111', '41223246', 'Liu41223244', '41223236', '41223219',
    '41271237', '41223249', '41223229', '41223224', '41223222', '41223231',
    'linryan23', '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218',
    'ych0227', '41023215', '41023216', '41023213', '41071203', '41071204',
    '41071202', 'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10'
}

brython_div1 = document["brython_div1"]

def process_data(response_text):
    data = response_text.splitlines()
    all_stud = data[1:]

    for stud in all_stud:
        student_info = stud.strip().split()

        if len(student_info) == 2:
            student_id = student_info[0].strip()
            student_account = student_info[1].strip()

            # 帳號不在已分組名單 → 尚未分組
            if student_account not in grouped_accounts:
                brython_div1 &lt;= student_id
                brython_div1 &lt;= html.BR()

        elif len(student_info) == 1:
            # 沒有帳號的直接列出
            student_id = student_info[0].strip()
            brython_div1 &lt;= student_id
            brython_div1 &lt;= html.BR()

window.fetch(url).then(lambda response: response.text()).then(process_data)
</pre>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RjX95uqpmDk" width="560"></iframe></p>
<h2>task3</h2>
<p><strong>使用 Solvespace 建立平面四連桿系統零組件</strong></p>
<p><a href="https://drive.google.com/drive/folders/1O_Nu0jMDW87vw11wMTFJ8po_uPXV4bIX?usp=drive_link">Download.slvs</a></p>
<p><span style="background-color: #ff99cc;"><strong>link1</strong></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/Esk8uXsGoS0" title="link1-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe>\</p>
<p><span style="background-color: #ffcc99;"><strong>link2</strong></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/UpXrBdoV2io" title="link2-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe></p>
<p><span style="background-color: #ffff99;"><strong>link3</strong></span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/DxVinA48c0o" title="link3-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe></p>
<p><span style="background-color: #ccffcc;">base</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/H5C8hjwKGGE" title="base-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe></p>
<p></p>
<p><span style="background-color: #ccffff;">shaft</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/lz0wGVLiNy4" title="shaft-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe><span style="background-color: #ccffff;"><br/></span></p>
<p><span style="background-color: #99ccff;">shaft2</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/ITl9zVjBumY" title="shaft2-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe></p>
<p><span style="background-color: #cc99ff;">fourbar linkage design</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/tDq35B24AVQ" title="fourbar linkage design-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe></p>
<p><span style="background-color: #cc99ff;">fourbar linkage design w assembly</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/TDIRsUjEwhw" title="fourbar linkage design w assembly-Solvespace 建立平面四連桿系統零組件-41223235" width="400"></iframe></p>
<h2>task4</h2>
<h3>w4</h3>
<p><a href="/downloads/41223228 hw-1.7z">/downloads/41223228.zip</a>完成的檔案</p>
<p><strong>建造平面四連桿的尺寸設計: 固定桿長度為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m</strong></p>
<p>1.建立robot群組</p>
<p>2.robot下的children建立1個solid群組，2個higejoint群組，並選一個為首要，命名為joint1</p>
<p>3.solid的children中建立shape作為固定桿(X1,Y0.1,Z0.1)</p>
<p>4.<span>joint1下的endpoint選擇solid性質，命名為link1，並往下的children中建立pose及higejoint，pose下在建立shape為主動桿(0.4,0.1,0.1)</span><span>，shape命名為link1，再將主動桿所屬的pose的translation設為(0.2,0,0)(此為link1中心點)，而higejoint為主動桿與第二桿連接，並命名為joint2。</span></p>
<p><span>5.joint1的endpoint下有translation(此為連接處的座標點)，設(-0.5,0,0.1)</span></p>
<p><span>6.在joint1下有boundingObject，選擇pose，往下children選擇USE link1，並調整座標至(0.2,0,0)(與link1的pose座標一致)，在設置physics</span></p>
<p>7.以上順序重複製作，主要為base--&gt;joint1--&gt;link1--&gt;<span>joint2--&gt;link2--&gt;</span><span>joint3--&gt;link3--&gt;joint4</span></p>
<p><span>8.joint4在robot群組中的children，與joint1同排列，並將endpoint設為solidreference，並選為use link3</span></p>
<p><span>9.每一階的joint中各有jointparameters、device、emdpoint，其中link1上的device要加入Rotationalmotor，並命名為motor</span></p>
<p><span>10.而每一階的jointparameters，axis設為(0,0,1)(意為繞z軸旋轉)，但anchor要設為桿的長度，這樣才是joint到joint的距離，分別為(-0.5,0,0)、(0.4,0,0)、(0.6,0,0)，此座標是接續的，原點根據base的起點，另外設置的joint4則為(0.5,0,0)</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sqQYrGttNcE" width="560"></iframe></p>
<h3>w6</h3>
<p>hw2的連桿尺寸是曲柄40mm鏈接桿60mm搖桿90mm</p>
<p>組裝影片</p>
<p><a href="/downloads/41223228 hw-2.7z">/downloads/41223228 hw-2.7z</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ar_JmL5LBAU" width="560"></iframe></p>
<p>使用task3的零件組裝後導出stl檔，現在要把stl檔轉成<span>Webots 可以使用的obj檔</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on: 2025-02-09 15:40:51 UTC
Author: mdecycu
Description: STL file converter that splits STL files into multiple OBJ files with MTL materials
"""

import struct
import numpy as np
from pathlib import Path

class STLConverter:
    def __init__(self, filename, scale=0.001):  # 新增 scale 參數，預設 0.001 將 mm 轉換為 m
        self.filename = filename
        self.scale = scale
        self.is_binary = self._check_if_binary()
        
    def _check_if_binary(self):
        """檢查 STL 檔案是否為二進制格式"""
        with open(self.filename, 'rb') as f:
            header = f.read(5).decode('utf-8', errors='ignore')
            return not header.startswith('solid')
    
    def _read_binary_stl(self):
        """讀取二進制 STL 檔案"""
        with open(self.filename, 'rb') as f:
            f.seek(80)
            triangle_count = struct.unpack('I', f.read(4))[0]
            
            triangles = []
            normals = []
            
            for _ in range(triangle_count):
                nx, ny, nz = struct.unpack('fff', f.read(12))
                normals.append([nx, ny, nz])
                
                triangle = []
                for _ in range(3):
                    x, y, z = struct.unpack('fff', f.read(12))
                    # 在讀取頂點時進行縮放
                    triangle.append([x * self.scale, y * self.scale, z * self.scale])
                triangles.append(triangle)
                
                f.seek(2, 1)
                
        return np.array(triangles), np.array(normals)
    
    def _read_ascii_stl(self):
        """讀取 ASCII STL 檔案"""
        triangles = []
        normals = []
        current_triangle = []
        
        with open(self.filename, 'r') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                    
                parts = line.split()
                if not parts:
                    continue
                
                if parts[0] == 'facet' and parts[1] == 'normal':
                    normals.append([float(parts[2]), float(parts[3]), float(parts[4])])
                elif parts[0] == 'vertex':
                    # 在讀取頂點時進行縮放
                    current_triangle.append([
                        float(parts[1]) * self.scale,
                        float(parts[2]) * self.scale,
                        float(parts[3]) * self.scale
                    ])
                elif parts[0] == 'endfacet':
                    if current_triangle:
                        triangles.append(current_triangle)
                        current_triangle = []
        
        return np.array(triangles), np.array(normals)
    
    def _split_by_connected_components(self, triangles, normals):
        """使用連通分量分割模型"""
        vertex_to_triangle = {}
        for i, triangle in enumerate(triangles):
            for vertex in triangle:
                vertex_tuple = tuple(vertex)
                if vertex_tuple in vertex_to_triangle:
                    vertex_to_triangle[vertex_tuple].append(i)
                else:
                    vertex_to_triangle[vertex_tuple] = [i]
        
        visited = set()
        components = []
        
        def dfs(triangle_idx):
            component = []
            stack = [triangle_idx]
            
            while stack:
                current = stack.pop()
                if current not in visited:
                    visited.add(current)
                    component.append(current)
                    
                    for vertex in triangles[current]:
                        vertex_tuple = tuple(vertex)
                        for neighbor in vertex_to_triangle[vertex_tuple]:
                            if neighbor not in visited:
                                stack.append(neighbor)
            
            return component
        
        for i in range(len(triangles)):
            if i not in visited:
                component = dfs(i)
                components.append(component)
        
        return components
    
    def _write_binary_stl(self, filename, triangles, normals):
        """寫入二進制 STL 檔案"""
        with open(filename, 'wb') as f:
            f.write(b'\x00' * 80)
            f.write(struct.pack('I', len(triangles)))
            
            for triangle, normal in zip(triangles, normals):
                f.write(struct.pack('fff', *normal))
                for vertex in triangle:
                    f.write(struct.pack('fff', *vertex))
                f.write(struct.pack('H', 0))

    def _write_mtl(self, filename, material_name):
        """寫入 MTL 材質檔案"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"newmtl {material_name}\n")
            f.write("Ka 0.2 0.2 0.2\n")  # Ambient color
            f.write("Kd 0.8 0.8 0.8\n")  # Diffuse color
            f.write("Ks 0.5 0.5 0.5\n")  # Specular color
            f.write("Ns 50.0\n")         # Specular exponent
            f.write("d 1.0\n")           # Transparency (1.0 = opaque)
            f.write("illum 2\n")         # Illumination model

    def _write_obj(self, filename, triangles, normals):
        """寫入 OBJ 檔案"""
        vertex_dict = {}
        vertex_list = []
        normal_list = []
        faces = []
        
        for triangle, normal in zip(triangles, normals):
            face_indices = []
            
            for vertex in triangle:
                vertex_tuple = tuple(vertex)
                if vertex_tuple not in vertex_dict:
                    vertex_dict[vertex_tuple] = len(vertex_list) + 1
                    vertex_list.append(vertex)
                face_indices.append(vertex_dict[vertex_tuple])
            
            normal_list.append(normal)
            faces.append(face_indices)
        
        # Generate material name from the obj filename
        material_name = filename.stem
        # Create MTL filename using Path
        mtl_filename = filename.with_suffix('.mtl')
        
        # Write OBJ file
        with open(filename, 'w', encoding='utf-8') as f:
            # Reference the MTL file
            f.write(f"mtllib {mtl_filename.name}\n")
            f.write(f"usemtl {material_name}\n\n")
            
            for v in vertex_list:
                f.write(f"v {v[0]} {v[1]} {v[2]}\n")
            
            for n in normal_list:
                f.write(f"vn {n[0]} {n[1]} {n[2]}\n")
            
            for i, face in enumerate(faces):
                f.write(f"f {face[0]}//{i+1} {face[1]}//{i+1} {face[2]}//{i+1}\n")
        
        # Write the corresponding MTL file
        self._write_mtl(mtl_filename, material_name)
    
    def split_and_convert(self):
        """分割 STL 檔案並轉換為 OBJ 格式"""
        if self.is_binary:
            triangles, normals = self._read_binary_stl()
        else:
            triangles, normals = self._read_ascii_stl()
        
        components = self._split_by_connected_components(triangles, normals)
        
        output_dir = Path('split_parts')
        output_dir.mkdir(exist_ok=True)
        
        for i, component in enumerate(components):
            component_triangles = triangles[component]
            component_normals = normals[component]
            
            base_name = f"part_{i + 1}"
            stl_filename = output_dir / f"{base_name}.stl"
            obj_filename = output_dir / f"{base_name}.obj"
            
            #self._write_binary_stl(stl_filename, component_triangles, component_normals)
            self._write_obj(obj_filename, component_triangles, component_normals)
            
            print(f"已儲存零件 {i + 1} 到:")
            #print(f"  STL: {stl_filename}")
            print(f"  OBJ: {obj_filename}")
            print(f"  MTL: {obj_filename.with_suffix('.mtl')}")
        
        return len(components)

# 直接轉換指定的 STL 檔案
try:
    # 指定要轉換的 STL 檔案名稱和縮放比例
    stl_file = "win2.stl"
    scale = 0.01  # 縮放比例，可以根據需要調整</pre>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lgX_2xysFRQ" width="560"></iframe></span></p>
<p><span></span></p>
<h2>task5</h2>
<h3>w7</h3>
<p><span>solvespace basket_ball_shooter繪製影片:<a href="https://youtu.be/Y-5L4rkpk4w">https://youtu.be/Y-5L4rkpk4w</a></span></p>
<p><span>basket_ball_shooter檔案:</span><a href="/downloads/basketball繪製.zip">/downloads/basketball繪製.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Y-5L4rkpk4w" width="560"></iframe></p>
<h3>w9</h3>
<p><span>shooter導入webot</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7d5zxNYK7U4" width="560"></iframe></p>
<p>過程 </p>
<p>使用老師給的零件圖尺寸，利用<span>solvespace組裝轉出stl檔，stl檔利用老師的py檔轉成obj供webots使用</span></p>
<p><span>打開webots 開起一個robot群組 在robot的children裡建立三個子群組solid當base 兩個hingejoint 一個當joint1檔連桿之間的定位和鎖固，一個當joint4讓連桿的群組和base的另一個軸連接。</span></p>
<p><span>在joint1裡建立higejintparameters和solid 在solid裡開啟children建立cadshape用來開啟桿一的外形，再從solid裡開啟mesh開啟桿一的碰撞體積，在開啟phyaixs，開啟桿子的物理性質，讓馬達傳動時會跟著一起運動，在回到joint1的device裡開啟馬達。joint1的higejintparameters是控制joint1軸的位子以及角度，需要特別注意。</span></p>
<p>後續一直到<span>joint4都是無限套娃除了馬達不用開其他都一樣，在最後joint4鏈接base的時候要特別注意使用的是solidreference鏈接桿3，要注意的是桿三要取名字。</span></p><h3>w11</h3>
<p><span>solvespace籃框繪製影片:<a href="https://youtu.be/4LJ1-oZEsqI">https://youtu.be/4LJ1-oZEsqI</a></span></p>
<p><span>檔案:<a href="/downloads/籃框.zip">/downloads/籃框.zip</a></span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4LJ1-oZEsqI" width="560"></iframe></span></p>
<h2>task6</h2>
<p><span>Webots Tutorial 4 ~6</span></p>
<p><a href="/downloads/my_first_simulation.7z">檔案下載</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fFGLjtW3PDk" width="400"></iframe></p>
<h1>Homework</h1>
<h2>HW1</h2>
<p><span>先由solvespace畫簡單的模型模擬旋轉路徑，然後再開始使用Webots進行模型的建立</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7GQWMKD4E6o" width="560"></iframe></span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Le_fHPt_8HU" width="560"></iframe></span></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><img alt="" height="225" src="/images/1.png" width="400"/></p>
<p><img alt="" height="225" src="/images/2.png" width="400"/></p>
<p><img alt="" height="225" src="/images/3.png" width="400"/></p>
<p><img alt="" height="316" src="/images/4.png" width="400"/></p>
<p><img alt="" height="227" src="/images/5.png" width="400"/></p>
<p><img alt="" height="225" src="/images/6.png" width="400"/></p>
<p><img alt="" height="225" src="/images/www.png" width="400"/></p>
<p><a href="https://youtu.be/uAxIZECWl6E">sovlespace 連桿繪製影片</a></p>
<p><a href="/downloads/practice1.7z">sovlespace 檔案</a></p>
<p><a href="/downloads/moni.7z">連桿檔案</a></p>
<p><a href="https://youtu.be/xfxZenH9mKE">webot匯入cad檔案影片</a></p>
<p>----------------------------------------------------</p>
<p>如何將stl轉成obj檔並且拆解</p>
<p>需先在環境中安裝numpy </p>
<p>在cmd裡打<strong>pip install numpy</strong>即可安裝</p>
<p>然後就可以用.py檔拆stl</p>
<p><a href="https://medium.com/@chiukevin08/numpy%E4%BB%8B%E7%B4%B9-61eb7f288b8d">numpy模組介紹</a></p>
<p><a href="https://youtu.be/I0H4Ixl0gM4">操作影片</a></p>
<p><img alt="" height="244" src="/images/chrome_egtjAuDdo3.png" width="400"/></p>
<p><a href="/downloads/split_stl py.7z">/downloads/split_stl py.7z</a> 拆開的檔案</p>
<p>----------------------------------------------------------------</p>
<p><a href="https://youtu.be/kQ_DBrLn2M0">模擬影片</a></p>
<p>連桿檔案<a href="/downloads/worlds.7z">/downloads/worlds.7z</a></p>
<p><a href="/downloads/fourbar_slvs-2.7z">/downloads/fourbar_slvs-2.7z</a></p>
<p><img alt="" height="138" src="/images/webots-bin_1orlBpw2oy.png" width="400"/></p>
<p>連接好的圖片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/ksVo3IAzcmE" target="_blank">https://youtu.be/ksVo3IAzcmE</a> 詳細製作過程</p>
<p>robot的資料夾下children裡有三個檔案</p>
<p>solid-1 (基座一)</p>
<p>solid-2 (基座二)</p>
<p>hingejoint 連接桿 (中間那三根的特徵)</p>
<p>物理性質記得開 不然不會跑 </p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p><a href="https://youtu.be/JqqnqCkwVis">hw3繪製零件</a></p>
<p><a href="/downloads/41223215 shooter.7z">/downloads/41223215 shooter.7z</a></p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/DddqK8xxv5s" target="_blank">https://youtu.be/DddqK8xxv5s</a> 半成品模擬影片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/5rvXEyfOqPw" target="_blank">https://youtu.be/5rvXEyfOqPw</a> 完成品模擬影片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/EJ3XKhpBrUM" target="_blank">https://youtu.be/EJ3XKhpBrUM</a> webot製作</p>
<p><a href="/downloads/shooter-2.7z">/downloads/shooter-2.7z</a>檔案</p>
<p><img alt="" height="174" src="/images/webots-bin_b6D52V4UPz.png" width="400"/></p>
<p>過程 </p>
<p>sovlespace繪製出零件 繪製出設計圖 再根據設計圖的形狀組配</p>
<p>組配完進行拆解轉檔(obj)(拆解過程會把尺寸縮小0.01倍)</p>
<p>進入webot 建robot 建出三個子特徵 solid(base) 兩個hingejoint(一個進行組裝 一個鎖點)</p>
<p>組裝過程續注意座標軸(會根據你繪圖起始的地方做原點) 可以進入sovlespace進行測量</p>
<p>測量鎖點點位 過程跟前面四連桿一樣 可以在過程中進行測試 看看點位有沒有準</p>
<p>鎖好之後模擬(我有發現老師給的設計圖因為角度會讓球沒辦法射那麼遠 所以我自己改良了程式 在發射前程式會先畜力)</p>
<p>加入球體(shape) 給定物理性質</p>
<p>加入地板(floor) </p>
<p>加入籃框(我在畫籃框時 匯入webot有個問題 因為沒有轉檔(沒必要)所以尺寸是正常的100倍 所以我自己又改了老師的分解檔案 去掉拆開的部分 只保留鎖小跟轉檔的能力)</p>
<p>之後模擬就成功了 </p>
<p>以下為鎖小功能py檔</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
STL to OBJ converter with scaling support
"""

import struct
import numpy as np
from pathlib import Path

class STLConverter:
    def __init__(self, filename, scale=0.001):
        self.filename = filename
        self.scale = scale
        self.is_binary = self._check_if_binary()
        
    def _check_if_binary(self):
        with open(self.filename, 'rb') as f:
            header = f.read(5).decode('utf-8', errors='ignore')
            return not header.startswith('solid')
    
    def _read_binary_stl(self):
        with open(self.filename, 'rb') as f:
            f.seek(80)
            triangle_count = struct.unpack('I', f.read(4))[0]
            
            triangles = []
            normals = []
            
            for _ in range(triangle_count):
                nx, ny, nz = struct.unpack('fff', f.read(12))
                normals.append([nx, ny, nz])
                
                triangle = []
                for _ in range(3):
                    x, y, z = struct.unpack('fff', f.read(12))
                    triangle.append([x * self.scale, y * self.scale, z * self.scale])
                triangles.append(triangle)
                
                f.seek(2, 1)
                
        return np.array(triangles), np.array(normals)
    
    def _read_ascii_stl(self):
        triangles = []
        normals = []
        current_triangle = []
        
        with open(self.filename, 'r') as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                    
                parts = line.split()
                if not parts:
                    continue
                
                if parts[0] == 'facet' and parts[1] == 'normal':
                    normals.append([float(parts[2]), float(parts[3]), float(parts[4])])
                elif parts[0] == 'vertex':
                    current_triangle.append([
                        float(parts[1]) * self.scale,
                        float(parts[2]) * self.scale,
                        float(parts[3]) * self.scale
                    ])
                elif parts[0] == 'endfacet':
                    if current_triangle:
                        triangles.append(current_triangle)
                        current_triangle = []
        
        return np.array(triangles), np.array(normals)

    def _write_mtl(self, filename, material_name):
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"newmtl {material_name}\n")
            f.write("Ka 0.2 0.2 0.2\n")
            f.write("Kd 0.8 0.8 0.8\n")
            f.write("Ks 0.5 0.5 0.5\n")
            f.write("Ns 50.0\n")
            f.write("d 1.0\n")
            f.write("illum 2\n")

    def _write_obj(self, filename, triangles, normals):
        vertex_dict = {}
        vertex_list = []
        normal_list = []
        faces = []
        
        for triangle, normal in zip(triangles, normals):
            face_indices = []
            
            for vertex in triangle:
                vertex_tuple = tuple(vertex)
                if vertex_tuple not in vertex_dict:
                    vertex_dict[vertex_tuple] = len(vertex_list) + 1
                    vertex_list.append(vertex)
                face_indices.append(vertex_dict[vertex_tuple])
            
            normal_list.append(normal)
            faces.append(face_indices)
        
        material_name = filename.stem
        mtl_filename = filename.with_suffix('.mtl')
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"mtllib {mtl_filename.name}\n")
            f.write(f"usemtl {material_name}\n\n")
            
            for v in vertex_list:
                f.write(f"v {v[0]} {v[1]} {v[2]}\n")
            
            for n in normal_list:
                f.write(f"vn {n[0]} {n[1]} {n[2]}\n")
            
            for i, face in enumerate(faces):
                f.write(f"f {face[0]}//{i+1} {face[1]}//{i+1} {face[2]}//{i+1}\n")
        
        self._write_mtl(mtl_filename, material_name)
    
    def convert(self, output_path):
        if self.is_binary:
            triangles, normals = self._read_binary_stl()
        else:
            triangles, normals = self._read_ascii_stl()
        
        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        self._write_obj(output_path, triangles, normals)
        print(f"轉換完成：{output_path}")
        print(f"材質檔：{output_path.with_suffix('.mtl')}")

# 使用範例
try:
    input_stl = "籃框.stl"
    output_obj = "output/籃框.obj"
    scale = 0.005

    converter = STLConverter(input_stl, scale=scale)
    converter.convert(output_obj)
except Exception as e:
    print(f"錯誤: {e}")
</pre>
<p></p>
<p>以下為畜力控制器</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot
import time

def run_robot():
    # Create the Robot instance
    robot = Robot()

    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())

    # Get motor and keyboard devices
    motor = robot.getDevice('motor1')
    keyboard = robot.getKeyboard()
    keyboard.enable(timestep)

    # Convert degrees to radians
    def deg2rad(deg):
        return deg * 3.14159 / 180

    # Set initial motor position to -5 degrees (蓄力)
    motor.setPosition(deg2rad(-10))
    # Wait for a short time (e.g., 1 second) to complete the back movement
    for _ in range(int(300 / timestep)):  # wait ~1 second
        if robot.step(timestep) == -1:
            return

    # Main control loop
    while robot.step(timestep) != -1:
        # Move to 38 degrees
        motor.setPosition(deg2rad(38))

if __name__ == "__main__":
    run_robot()
</pre>
<p></p>
<h1>Exam</h1>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<p>繪製連桿</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8w8mpVrlSTw" width="560"></iframe></p>
<p><span>連桿距離</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/oGWXzjdoZbI" width="560"></iframe></span></p>
<p>運轉</p>
<p>運轉壓縮檔 : <a href="/downloads/Exam1運轉.zip">/downloads/Exam1運轉.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Gv7dciC0iBs" width="560"></iframe></p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41223226</p>
<p><a href="/downloads/Exam2_41223226.zip">Exam2</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/DIIqBplzhuk" width="400"></iframe></p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<p><span>以下為exam3-1製作過程:</span></p>
<p>首先收尋到控制室&gt;網路和網際網路&gt;網路和共用中心的檢視網路狀態及工作&gt;找到乙太網路&gt;內容&gt;找到IPv6&gt;</p>
<p><span>以我的為範例 我的地址和dns為 ( IPv6地址是到<a href="https://mde.tw/cd2025/content/IPv6.html">老師網站</a>找 )</span></p>
<p><span>2001:288:6004:17:fff1:cd25:0000:b047</span></p>
<p>修好後打開cmd <span>輸入webotsw --stream "你的HW1的wbt檔案位置"</span></p>
<p><span>webotsw下面有序號1234對應到網址上數字</span></p>
<p><span>打開後http://localhost:1234/index.html可以看到模擬程式</span></p>
<p><span>這是我的 Connect to: ws://[2001:288:6004:17:fff1:cd25:0000:b047]:1234</span></p>
<p><span>如果是要組員查看的話 改成組員的ipv6地址</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/248XXYZ_Fyw" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 41223235" width="400"></iframe></p>
<hr/>
<p><span>以下為exam3-2 製作過程:</span></p>
<p><span>首先先下載老師的七段顯示器進行修改,利用GPT了解程式碼功能,可在number = 235 更改數值,後面過程和exam3-1一樣瀏覽器檢視</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/81_A3JIT3Fg" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 41223235" width="400"></iframe></p>
<hr/>
<p><span>以下為exam3-3 製作過程:</span></p>
<p><span>這裡也是一樣用上面的方式開啟程式,利用老師給的.wbt來模擬,並到瀏覽器檢視</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="225" referrerpolicy="strict-origin-when-cross-origin" src="//www.youtube.com/embed/QOASi4UFuFk" title="國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 41223235" width="400"></iframe></p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<p><span style="background-color: #ffff00;"></span></p>
<p><a href="/downloads/final project.7z">/downloads/final project.7z</a> 檔案位置</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/5besxJuk2bs" target="_blank">https://youtu.be/5besxJuk2bs</a> 模擬影片-1 把shooter和車子黏起來 利用bounding object group來實現</p>
<p>以下是控制車子和投射器的程式檔案</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard
import time

# Constants
TIME_STEP = 32
MAX_VELOCITY = 10.0
ANGLE_STEP = 40 * 3.14159 / 180  # 40 degrees in radians
POSITION_M = ANGLE_STEP          # +40 deg (擊出)
POSITION_K = 0.0                 # 0 deg  (收回)
KICK_DELAY = 0.5                 # 擊出後延遲時間 (秒)

# Initialize robot and keyboard
robot = Robot()
timestep = int(robot.getBasicTimeStep())
keyboard = Keyboard()
keyboard.enable(timestep)

# Get motor and sensor
try:
    motor = robot.getDevice('motor1')
    sensor = robot.getDevice('motor1_sensor')
    sensor.enable(timestep)
    mechanism_enabled = True
except Exception:
    mechanism_enabled = False

# Get wheels
try:
    wheels = [robot.getDevice(f"wheel{i+1}") for i in range(4)]
    for wheel in wheels:
        wheel.setPosition(float('inf'))  # Infinite position for velocity control
        wheel.setVelocity(0)
    platform_enabled = True
except Exception:
    platform_enabled = False

# Debounce key
key_pressed = {
    'k': False
}

while robot.step(timestep) != -1:
    key = keyboard.getKey()

    # Platform control
    if platform_enabled:
        if key == Keyboard.UP:
            for wheel in wheels:
                wheel.setVelocity(MAX_VELOCITY)
        elif key == Keyboard.DOWN:
            for wheel in wheels:
                wheel.setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.LEFT:
            wheels[0].setVelocity(MAX_VELOCITY)
            wheels[1].setVelocity(-MAX_VELOCITY)
            wheels[2].setVelocity(MAX_VELOCITY)
            wheels[3].setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.RIGHT:
            wheels[0].setVelocity(-MAX_VELOCITY)
            wheels[1].setVelocity(MAX_VELOCITY)
            wheels[2].setVelocity(-MAX_VELOCITY)
            wheels[3].setVelocity(MAX_VELOCITY)
        elif key == ord('Q') or key == ord('q'):
            print("Exiting...")
            break
        else:
            for wheel in wheels:
                wheel.setVelocity(0)

    # Kick mechanism control
    if mechanism_enabled:
        if key == ord('M') or key == ord('k'):
            if not key_pressed['M']:
                print("[KICK] 出擊 → 收回")
                motor.setPosition(POSITION_M)
                
                # 延遲（非阻塞式等待）
                start_time = robot.getTime()
                while robot.step(timestep) != -1:
                    if robot.getTime() - start_time &gt;= KICK_DELAY:
                        break

                motor.setPosition(POSITION_K)
            key_pressed['M'] = True
        else:
            key_pressed['M'] = False
</pre>
<p></p>
<p><a href="/downloads/final project (2).7z">/downloads/final project (2).7z</a> 這是加上補球的檔案</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/GoxnCxqUoD8" target="_blank">https://youtu.be/GoxnCxqUoD8</a> 這是製作過程</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/A2Gu5H4j0zk" target="_blank">https://youtu.be/A2Gu5H4j0zk</a>  這是展示影片</p>
<p><img alt="" height="162" src="/images/webots-bin_vYoxKnz7AK.png" width="400"/></p>
<p>製作具體流程 先創立一個新的robot 把supervisor改成true 令我們可以用程式創建球體</p>
<p>之後匯入.py檔案 就可以開始了</p>
<p>以下是控制發球機構的程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Supervisor, Keyboard
import time
import random
import numpy as np
import re

# ----------------- 參數區 -----------------
HOOP_CENTER = [0.622, -0.103, 0.742838]
BALL_DEF_PATTERN = re.compile(r"Sphere_\d+")
supervisor = Supervisor()
timestep = int(supervisor.getBasicTimeStep())
keyboard = Keyboard()
keyboard.enable(timestep)

sphere_radius = 0.1
TRAJECTORY_POINT_RADIUS = 0.03      # 軌跡小球半徑
TRAJECTORY_POINT_STEP = 0.12        # 軌跡點間最小距離
TRAJECTORY_MAX_POINTS = 5           # 只保留5個軌跡點

waiting_ball_def = None
waiting_ball_info = None
last_key_time = 0
debounce_time = 0.5
default_feed_pos = (0.029277, 0.020116, 1.37973)
PRINT_INTERVAL = 0.2

current_tracked_def = None
last_print_time = time.time()

# 軌跡資料
trajectory_points = []  # [(pos, def_name)] 最多五個

def axis_angle_to_rotation_matrix(axis, angle):
    x, y, z = axis
    c = np.cos(angle)
    s = np.sin(angle)
    C = 1 - c
    return np.array([
        [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],
        [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],
        [z*x*C - y*s, z*y*C + x*s, z*z*C + c]
    ])

def generate_valid_def_name(base_name="Sphere"):
    timestamp = int(supervisor.getTime() * 1000)
    return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"

def generate_random_color():
    return random.random(), random.random(), random.random()

def youbot_local_to_world(local_pos):
    youbot_node = supervisor.getFromDef('youbot')
    if youbot_node is None:
        raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")
    youbot_translation = np.array(youbot_node.getField('translation').getSFVec3f())
    youbot_rotation = youbot_node.getField('rotation').getSFRotation()
    youbot_axis = youbot_rotation[:3]
    youbot_angle = youbot_rotation[3]
    youbot_rot_mat = axis_angle_to_rotation_matrix(youbot_axis, youbot_angle)
    rotated = youbot_rot_mat @ np.array(local_pos)
    world_pos = youbot_translation + rotated
    return tuple(world_pos)

def create_static_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)

def create_dynamic_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
      physics Physics {{
        mass 0.01
        density -1
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)

def create_trajectory_point(pos):
    """
    在pos位置新增一個小球作為拋物線軌跡點，回傳DEF名稱。
    用Transform持有Shape，僅作視覺標記，不影響物理。
    """
    def_name = generate_valid_def_name("TrajectoryPt")
    sphere_string = f"""
    DEF {def_name} Transform {{
      translation {pos[0]} {pos[1]} {pos[2]}
      children [
        Shape {{
          geometry Sphere {{
            radius {TRAJECTORY_POINT_RADIUS}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor 1 0.7 0
              transparency 0.3
            }}
          }}
        }}
      ]
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)
    return def_name

def delete_trajectory_points():
    """刪除所有軌跡點"""
    global trajectory_points
    for _, def_name in trajectory_points:
        node = supervisor.getFromDef(def_name)
        if node:
            node.remove()
    trajectory_points.clear()

def create_static_sphere(supervisor, x, y, z):
    global waiting_ball_def, waiting_ball_info
    def_name = generate_valid_def_name()
    waiting_ball_def = def_name
    r, g, b = generate_random_color()
    world_pos = youbot_local_to_world((x, y, z))
    waiting_ball_info = (world_pos, r, g, b)
    create_static_ball(def_name, world_pos, r, g, b)

def activate_dynamic_ball():
    global waiting_ball_def, waiting_ball_info
    if waiting_ball_def is None or waiting_ball_info is None:
        return
    ball_node = supervisor.getFromDef(waiting_ball_def)
    if ball_node is not None:
        ball_node.remove()
        supervisor.step(int(supervisor.getBasicTimeStep()))
    world_pos, r, g, b = waiting_ball_info
    create_dynamic_ball(waiting_ball_def, world_pos, r, g, b)
    waiting_ball_def = None
    waiting_ball_info = None

def is_ball_landed(pos, threshold_z=0.13):
    """當球z接近地面時視為落地"""
    return pos[2] &lt; threshold_z

print("按 A 產生一顆靜止球，按 M 讓球變 dynamic 可擊出（最多只有5個軌跡點跟著球跑，球落地後軌跡自動消失）")

while supervisor.step(timestep) != -1:
    key = keyboard.getKey()
    current_time = time.time()
    # 產生球
    if key == ord('A') and (current_time - last_key_time &gt;= debounce_time):
        if waiting_ball_def is None:
            create_static_sphere(supervisor, *default_feed_pos)
            current_tracked_def = waiting_ball_def
            delete_trajectory_points()  # 新球產生時清除舊軌跡
        else:
            print("還有一顆球等待擊出，請先擊出再產生新球。")
        last_key_time = current_time
    # 讓球變動態
    if key == ord('M') and (current_time - last_key_time &gt;= debounce_time):
        activate_dynamic_ball()
        last_key_time = current_time

    # 拋物線軌跡追蹤
    if current_tracked_def is not None:
        ball_node = supervisor.getFromDef(current_tracked_def)
        if ball_node is not None:
            pos = ball_node.getPosition()
            # 每 PRINT_INTERVAL 印座標
            if current_time - last_print_time &gt;= PRINT_INTERVAL:
                #print(f"球 {current_tracked_def} 絕對座標: [{pos[0]:.4f}, {pos[1]:.4f}, {pos[2]:.4f}]")
                last_print_time = current_time
            # 軌跡點：每隔一段距離才加一個，僅保留5個點
            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) &gt; TRAJECTORY_POINT_STEP:
                def_name = create_trajectory_point(pos)
                trajectory_points.append((pos, def_name))
                if len(trajectory_points) &gt; TRAJECTORY_MAX_POINTS:
                    # 移除最舊的點
                    _, old_def = trajectory_points.pop(0)
                    node = supervisor.getFromDef(old_def)
                    if node:
                        node.remove()
            # 若球落地，自動清除軌跡
            if is_ball_landed(pos):
                delete_trajectory_points()
        else:
            # 球消失，停止追蹤並清除軌跡
            delete_trajectory_points()
            current_tracked_def = None
# Enter here exit cleanup code.
</pre>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/f6KmEgIFJbw" target="_blank">https://youtu.be/f6KmEgIFJbw</a> 模擬影片</p>
<p><a href="/downloads/final project (3).7z">/downloads/final project (3).7z</a> 這是檔案(第三版)</p>
<p>以下是籃框的移動和偵測系統</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard, Emitter

# Constants
WHEEL_RADIUS = 0.1  # Radius of the wheels in meters
L = 0.471  # Half of the robot's length
W = 0.376  # Half of the robot's width
MAX_VELOCITY = 10.0  # Maximum wheel velocity

# Initialize robot and keyboard
robot = Robot()
timestep = int(robot.getBasicTimeStep())
keyboard = Keyboard()
keyboard.enable(timestep)

# Get emitter device for sending score
emitter = robot.getDevice("score_emitter")

# Get distance sensor
sensor = robot.getDevice('sensor')
sensor.enable(timestep)
score = 0
last_score_time = 0
cooldown = 1.0

# Get motors
wheel5 = robot.getDevice("wheel5")  # Front-right
wheel6 = robot.getDevice("wheel6")  # Front-left
wheel7 = robot.getDevice("wheel7")  # Rear-right
wheel8 = robot.getDevice("wheel8")  # Rear-left

# Enable velocity control
for wheel in [wheel5, wheel6, wheel7, wheel8]:
    wheel.setPosition(float('inf'))
    wheel.setVelocity(0)

def set_wheel_velocity(v1, v2, v3, v4):
    wheel5.setVelocity(v1)
    wheel6.setVelocity(v2)
    wheel7.setVelocity(v3)
    wheel8.setVelocity(v4)

# Lookup table for AD to distance
lookup_table = [
    (1000, 0.00),
    (620, 0.12),
    (372, 0.13),
    (248, 0.14),
    (186, 0.15),
    (0, 0.18)
]

def ad_to_distance(ad_value):
    for i in range(len(lookup_table) - 1):
        a0, d0 = lookup_table[i]
        a1, d1 = lookup_table[i + 1]
        if a1 &lt;= ad_value &lt;= a0:
            return d0 + (d1 - d0) * (ad_value - a0) / (a1 - a0)
    if ad_value &gt; lookup_table[0][0]:
        return lookup_table[0][1]
    return lookup_table[-1][1]

# User instructions
print("Controls:")
print("U = forward, J = backward, H = turn left, K = turn right, Q = quit")

# Main loop
keys = set()
while robot.step(timestep) != -1:
    key = keyboard.getKey()
    while key != -1:
        keys.add(key)
        key = keyboard.getKey()

    sensor_value = sensor.getValue()
    distance = ad_to_distance(sensor_value)
    current_time = robot.getTime()

    if ord('M') in keys or ord('m') in keys:
        print("Distance (M):", distance)
    if ord('K') in keys or ord('k') in keys:
        print("Distance (K):", distance)

    if distance &lt; 0.18 and (current_time - last_score_time) &gt; cooldown:
        score += 2
        last_score_time = current_time
        print("得分 +2")
        print("Current Distance:", distance)
        emitter.send(str(2))  # 送出得分

    # Movement control
    if ord('U') in keys or ord('u') in keys:
        set_wheel_velocity(MAX_VELOCITY, MAX_VELOCITY, MAX_VELOCITY, MAX_VELOCITY)
    elif ord('J') in keys or ord('j') in keys:
        set_wheel_velocity(-MAX_VELOCITY, -MAX_VELOCITY, -MAX_VELOCITY, -MAX_VELOCITY)
    elif ord('K') in keys or ord('k') in keys:
        set_wheel_velocity(-MAX_VELOCITY, MAX_VELOCITY, -MAX_VELOCITY, MAX_VELOCITY)
    elif ord('H') in keys or ord('h') in keys:
        set_wheel_velocity(MAX_VELOCITY, -MAX_VELOCITY, MAX_VELOCITY, -MAX_VELOCITY)
    elif ord('Q') in keys or ord('q') in keys:
        print("Exiting...")
        break
    else:
        set_wheel_velocity(0, 0, 0, 0)

    keys.clear()
</pre>
<p><br/>以下是七段顯示器的控制系統</p>
<p>from controller import Supervisor</p>
<p>SEGMENTS = [<br/> [1,1,1,1,1,1,0], # 0<br/> [0,1,1,0,0,0,0], # 1<br/> [1,1,0,1,1,0,1], # 2<br/> [1,1,1,1,0,0,1], # 3<br/> [0,1,1,0,0,1,1], # 4<br/> [1,0,1,1,0,1,1], # 5<br/> [1,0,1,1,1,1,1], # 6<br/> [1,1,1,0,0,0,0], # 7<br/> [1,1,1,1,1,1,1], # 8<br/> [1,1,1,1,0,1,1], # 9<br/>]<br/>DIGIT_MATERIALS = [<br/> ['a3mat', 'b3mat', 'c3mat', 'd3mat', 'e3mat', 'f3mat', 'g3mat'], # 百<br/> ['a2mat', 'b2mat', 'c2mat', 'd2mat', 'e2mat', 'f2mat', 'g2mat'], # 十<br/> ['a1mat', 'b1mat', 'c1mat', 'd1mat', 'e1mat', 'f1mat', 'g1mat'], # 個<br/>]<br/>ON_COLOR = [0, 1, 0]<br/>OFF_COLOR = [0.05, 0.05, 0.05]</p>
<p>def set_digit(supervisor, digit_index, value):<br/> segs = SEGMENTS[value]<br/> for i, seg_on in enumerate(segs):<br/> mat_node = supervisor.getFromDef(DIGIT_MATERIALS[digit_index][i])<br/> if mat_node:<br/> mat_node.getField('diffuseColor').setSFColor(ON_COLOR if seg_on else OFF_COLOR)<br/> else:<br/> print(f"找不到 {DIGIT_MATERIALS[digit_index][i]} 這個DEF")</p>
<p>def set_display(supervisor, value):<br/> value = max(0, min(999, int(value)))<br/> h = value // 100<br/> t = (value // 10) % 10<br/> u = value % 10<br/> set_digit(supervisor, 0, h)<br/> set_digit(supervisor, 1, t)<br/> set_digit(supervisor, 2, u)</p>
<p>supervisor = Supervisor()<br/>timestep = int(supervisor.getBasicTimeStep())</p>
<p>score = 0<br/>receiver = supervisor.getDevice("score_receiver")<br/>receiver.enable(timestep)</p>
<p>while supervisor.step(timestep) != -1:<br/> while receiver.getQueueLength() &gt; 0:<br/> data = receiver.getString()<br/> if data.isdigit():<br/> try:<br/> received_score = int(data)<br/> score += received_score<br/> print(f"收到得分訊息: +{received_score}, 總分: {score}")<br/> except Exception as e:<br/> print("訊息格式錯誤:", e)<br/> receiver.nextPacket()<br/> set_display(supervisor, score)</p>
<p><a href="/downloads/final project (4).7z">/downloads/final project (4).7z</a> 以下是檔案位置</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/_fwgpqRz49E" target="_blank">https://youtu.be/_fwgpqRz49E</a> 這是模擬影片</p>
<p><a class="style-scope ytcp-video-info" href="https://youtu.be/RgQjZCgOqFg" target="_blank">https://youtu.be/RgQjZCgOqFg</a> 這是製作過程</p>
<p></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>