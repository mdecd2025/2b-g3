var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 2b\xa0 g3第幾組網站:\xa0 https://mdecd2025.github.io/2b-g3 \n 2b\xa0 g3第幾組倉儲:\xa0 https://github.com/mdecd2025/2b-g3 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'repo', 'text': '在更新小組list的程式時，順便做的。( 執行結果 ) \n from browser import html, document\nimport urllib.request\n\n# 設定 URL\nurl = "https://mde.tw/list/2b.txt"\n\n# 讀取網站內容\nresponse = urllib.request.urlopen(url)\ndata = response.read().splitlines()  # 直接讀取並按行分割\n\n# 確保資料存在\nif len(data) > 1:\n    all_stud = data[1:]  # 跳過標題列\n    print("總共有 " + str(len(all_stud)) + " 名學員")\nelse:\n    all_stud = []\n    print("學員名單讀取失敗")\n\n# 找到網頁中的特定位置\nbrython_div1 = document["brython_div1"]\n\n# **動態插入所有學員資料，並為帳號添加超連結**\nfor index, student in enumerate(all_stud, start=1):\n    parts = student.split()  # 用空格分割學號和帳號\n    if len(parts) == 2:\n        student_id, account = parts\n        # 設定學號的超連結\n        account_link = f"https://mdecd2025.github.io/hw-{account.strip()}"\n        # 設定repo的超連結\n        repo_link = f"https://github.com/mdecd2025/hw-{account.strip()}"\n        \n        # 插入學號和帳號的超連結，並加上repo的超連結\n        brython_div1 <= f"{index}. " + html.A(student_id.strip(), href=account_link) + " " \n        brython_div1 <= f"（" + html.A("repo", href=repo_link) + "）"\n        brython_div1 <= html.BR()  # 換行\n    else:\n        print(f"格式錯誤，跳過此行: {student}")\n \n \n', 'tags': '', 'url': 'repo.html'}, {'title': 'Tasks', 'text': 'task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作: \n task1 (自行製作可攜程式系統) \n task2 (使用 SSH 協定執行作業倉儲的推送) \n task3 與 task4 則為 HW2 的內容之一 \n task3 (使用 Solvespace 建立平面四連桿系統零組件) \n task4 (使用 Onshape 建立平面四連桿系統零組件) \n task5 與 task6 則為 HW3 的主要內容 \n task5 (Webots Tutorial 1 ~3) \n task6 (Webots Tutorial 4 ~6) \n', 'tags': '', 'url': 'Tasks.html'}, {'title': 'task1', 'text': 'Portable\xa0 自行製作可攜程式系統 \n 目前最新的 Python 版本為 3.13.2, 利用舊版的 Python310,來建立 Python313可攜程式\xa0 \n (為了配合 Siemens NX2312)s \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'list', 'text': '\n g3成員 \n 查找g3成員的github頁面超鏈接和作業網站超鏈接 \n from browser import html, document, window\n\n# 定義資料來源 URL\nurl = "https://mde.tw/list/2b.txt"\n\n# 定義要查找的學號列表\ntarget_ids = ["41223226", "41223228", "41223206", "41223235", "41223227", "41223215"]\n\n# 顯示學員總數\nprint("正在處理學員資料...")\n\n# 取得 HTML 中的元素 id 為 "brython_div1"\nbrython_div1 = document["brython_div1"]\n\n# 使用 JavaScript 的 fetch API 來抓取資料\ndef process_data(response_text):\n    # 將抓取到的資料分行\n    data = response_text.splitlines()\n\n    # 跳過標題行，取得學員資料\n    all_stud = data[1:]\n\n    # 逐行處理學員資料\n    for stud in all_stud:\n        # 假設學員資料的格式為 "學號 學員賬號"\n        student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號\n        if len(student_info) == 2:  # 確保每行有學號和帳號\n            student_id = student_info[0].strip()  # 學號\n            student_account = student_info[1].strip()  # 學員賬號\n\n            # 檢查學號是否在目標學號列表中\n            if student_id in target_ids:\n                # 創建 GitHub 和作業網站的超鏈接\n                github_link = f"https://github.com/mdecd2025/hw-{student_account}"\n                homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"\n                \n                # 顯示該學號的 GitHub 和作業網站\n                brython_div1 <= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結\n                brython_div1 <= " "  # 空格\n                brython_div1 <= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)\n                brython_div1 <= html.BR()  # 換行\n\n# 使用 JavaScript 的 fetch API 拉取資料\nwindow.fetch(url).then(lambda response: response.text()).then(process_data) \n 查找學員github超鏈接 \n from browser import html, document\n\n# 定義資料來源 URL\nurl = "https://mde.tw/list/2b.txt"\n\n# 讀取資料\ndata = open(url).readlines()\n\n# 跳過標題行，取得學員資料\nall_stud = data[1:]\n\n# 顯示學員總數\nprint("總共有 " + str(len(all_stud)) + "名學員")\n\n# 取得 HTML 中的元素 id 為 "brython_div1"\nbrython_div1 = document["brython_div1"]\n\n# 逐行處理學員資料\nfor stud in all_stud:\n    # 假設學員資料的格式為 "學號 學員賬號"\n    student_info = stud.strip().split()  # 使用 split() 將每行分為學號和帳號\n    if len(student_info) == 2:  # 確保每行有學號和帳號\n        student_id = student_info[0].strip()  # 學號\n        student_account = student_info[1].strip()  # 學員賬號\n\n        # 創建 GitHub 和作業網站的超鏈接\n        github_link = f"https://github.com/mdecd2025/hw-{student_account}"\n        homework_link = f"https://mdecd2025.github.io/hw-{student_account}/"\n        \n        # 將學號作為 GitHub repository 的鏈接\n        brython_div1 <= html.A(student_id, href=github_link)  # 學號是 GitHub repo 連結\n        brython_div1 <= " "  # 空格\n        \n        # 插入作業網站的超鏈接，標題改為 "(repo)"\n        brython_div1 <= html.A("(repo)", href=homework_link)  # 作業網站的超鏈接標題為 (repo)\n        \n        # 插入換行\n        brython_div1 <= html.BR()  # 換行 \n \n', 'tags': '', 'url': 'list.html'}, {'title': 'task2', 'text': '近端倉儲推送: \n https://youtu.be/8n1LiOqBkko \n \n https://youtu.be/1Y36Zis2M6E \n \n 建立SSH key: \n \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'w3', 'text': '已知各班已經參與分組的學員 Github 帳號分別如下: \n a_all_members = [\'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\']\nb_all_members = [\'41223251\', \'41223211\', \'41223245\', \'41223243\', \'jjjay41223212\', \'leeshaowei0716\', \'41223234\', \'41223209\', \'41223205\', \'41223201\', \'41223202\', \'41223208-hw\', \'41223216\', \'41223217\', \'41223248\', \'emma0312\', \'41223242\', \'41223203\', \'41223144\', \'41223235\', \'RAY41223215\', \'hyy41223228\', \'41223227\', \'41223206\', \'41223226-0\', \'Cloud41223237\', \'Yujenchuang\', \'41223225\', \'ljg41223220\', \'supowen\', \'jacky93111\', \'41223246\', \'Liu41223244\', \'41223236\', \'41223219\', \'41271237\', \'41223249\', \'41223229\', \'41223224\', \'41223222\', \'41223231\', \'linryan23\', \'41023114\', \'41223230\', \'timluo123\', \'CYC41223247\', \'41223218\', \'ych0227\', \'41023215\', \'41023216\', \'41023213\', \'41071203\', \'41071204\', \'41071202\', \'c-ching\', \'YUN4\', \'tseYU000\', \'snowfall-killer\', \'junpig10\']\n \n 接著用程式列出目前各班尚未納組的學員學號。( 執行結果 ) \n from browser import html, document\nimport urllib.request\n \n# 設定 URL\nurl = "https://mde.tw/list/2b.txt"\n \n# 讀取網站內容\nresponse = urllib.request.urlopen(url)\ndata = response.read().splitlines()  # 直接讀取並按行分割\n \n# 確保資料存在\nif len(data) > 1:\n    all_stud = data[1:]  # 跳過標題列\n    print("總共有 " + str(len(all_stud)) + " 名學員")\nelse:\n    all_stud = []\n    print("學員名單讀取失敗")\n \n# 已分組的帳號名單\ngrouped_accounts = {\n    \'41223251\', \'41223211\', \'41223245\', \'41223243\', \'jjjay41223212\', \'leeshaowei0716\', \n    \'41223234\', \'41223209\', \'41223205\', \'41223201\', \'41223202\', \'41223208-hw\', \'41223216\', \n    \'41223217\', \'41223248\', \'emma0312\', \'41223242\', \'41223203\', \'41223144\', \'41223235\', \n    \'RAY41223215\', \'hyy41223228\', \'41223227\', \'41223206\', \'41223226-0\', \'Cloud41223237\', \n    \'Yujenchuang\', \'41223225\', \'ljg41223220\', \'supowen\', \'jacky93111\', \'41223246\', \'Liu41223244\', \n    \'41223236\', \'41223219\', \'41271237\', \'41223249\', \'41223229\', \'41223224\', \'41223222\', \n    \'41223231\', \'linryan23\', \'41023114\', \'41223230\', \'timluo123\', \'CYC41223247\', \'41223218\', \n    \'ych0227\', \'41023215\', \'41023216\', \'41023213\', \'41071203\', \'41071204\', \'41071202\', \n    \'c-ching\', \'YUN4\', \'tseYU000\', \'snowfall-killer\', \'junpig10\'\n}\n \n# 找到網頁中的特定位置\nbrython_div1 = document["brython_div1"]\n \n# **動態插入未分組的學號與超連結**\nindex = 1\nfor student in all_stud:\n    parts = student.strip().split()  # 用空格分割\n    if len(parts) == 0:\n        continue  # 跳過空行\n     \n    student_id = parts[0]  # 學號\n    account = parts[1] if len(parts) > 1 else student_id  # 若帳號空白則用學號當帳號\n \n    if account not in grouped_accounts:  # 只處理未分組帳號\n        # 設定學號的超連結\n        student_link = f"https://mdecd2025.github.io/hw-{account}"\n        # 設定repo的超連結\n        repo_link = f"https://github.com/mdecd2025/hw-{account}"\n         \n        # 插入學號作為超連結，並添加 repo 連結\n        brython_div1 <= f"{index}. " + html.A(student_id, href=student_link) + " "\n        brython_div1 <= f"（" + html.A("repo", href=repo_link) + "）"\n        brython_div1 <= html.BR()  # 換行\n        index += 1 \n \n', 'tags': '', 'url': 'w3.html'}, {'title': 'task3', 'text': '使用 Solvespace 建立平面四連桿系統零組件 \n Download.slvs \n link1 \n \\ \n link2 \n \n link3 \n \n base \n \n \n shaft \n \n shaft2 \n \n fourbar linkage design \n \n fourbar linkage design w assembly \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '', 'tags': '', 'url': 'task4.html'}, {'title': 'w4', 'text': '使用webot建立四連桿練習影片: https://youtu.be/XBE5bwX22Ro \n 四連桿檔案: /downloads/box_fourbar4.zip \n 建造平面四連桿的尺寸設計: 固定桿長度為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m \n 1.建立robot群組 \n 2.robot下的children建立1個solid群組，2個higejoint群組，並選一個為首要，命名為joint1 \n 3.solid的children中建立shape作為固定桿(X1,Y0.1,Z0.1) \n 4. joint1下的endpoint選擇solid性質，命名為link1，並往下的children中建立pose及higejoint，pose下在建立shape為主動桿(0.4,0.1,0.1) ，shape命名為link1，再將主動桿所屬的pose的translation設為(0.2,0,0)(此為link1中心點)，而higejoint為主動桿與第二桿連接，並命名為joint2。 \n 5.joint1的endpoint下有translation(此為連接處的座標點)，設(-0.5,0,0.1) \n 6.在joint1下有boundingObject，選擇pose，往下children選擇USE link1，並調整座標至(0.2,0,0)(與link1的pose座標一致)，在設置physics \n 7.以上順序重複製作，主要為base-->joint1-->link1--> joint2-->link2--> joint3-->link3-->joint4 \n 8.joint4在robot群組中的children，與joint1同排列，並將endpoint設為solidreference，並選為use link3 \n 9.每一階的joint中各有jointparameters、device、emdpoint，其中link1上的device要加入Rotationalmotor，並命名為motor \n 10.而每一階的jointparameters，axis設為(0,0,1)(意為繞z軸旋轉)，但anchor要設為桿的長度，這樣才是joint到joint的距離，分別為(-0.5,0,0)、(0.4,0,0)、(0.6,0,0)，此座標是接續的，原點根據base的起點，另外設置的joint4則為(0.5,0,0) \n \n \n', 'tags': '', 'url': 'w4.html'}, {'title': 'task5', 'text': '', 'tags': '', 'url': 'task5.html'}, {'title': 'w7', 'text': 'solvespace basket_ball_shooter繪製影片: https://youtu.be/Y-5L4rkpk4w \n basket_ball_shooter檔案: /downloads/basketball繪製.zip \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w11', 'text': 'solvespace籃框繪製影片: https://youtu.be/4LJ1-oZEsqI \n 檔案: /downloads/籃框.zip \n \n', 'tags': '', 'url': 'w11.html'}, {'title': 'task6', 'text': 'Webots Tutorial 4 ~6 \n 檔案下載 \n', 'tags': '', 'url': 'task6.html'}, {'title': 'Homework', 'text': '', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': '先由solvespace畫簡單的模型模擬旋轉路徑，然後再開始使用Webots進行模型的建立 \n \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n \n \n \n \n \n \n \n sovlespace 連桿繪製影片 \n sovlespace 檔案 \n 連桿檔案 \n webot匯入cad檔案影片 \n ---------------------------------------------------- \n 如何將stl轉成obj檔並且拆解 \n 需先在環境中安裝numpy\xa0 \n 在cmd裡打 pip install numpy 即可安裝 \n 然後就可以用.py檔拆stl \n numpy模組介紹 \n 操作影片 \n \n /downloads/split_stl py.7z \xa0拆開的檔案 \n ---------------------------------------------------------------- \n 模擬影片 \n 連桿檔案 /downloads/worlds.7z \n /downloads/fourbar_slvs-2.7z \n \n 連接好的圖片 \n https://youtu.be/ksVo3IAzcmE \xa0詳細製作過程 \n robot的資料夾下children裡有三個檔案 \n solid-1 (基座一) \n solid-2 (基座二) \n hingejoint 連接桿 (中間那三根的特徵) \n 物理性質記得開 不然不會跑\xa0 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n hw3繪製零件 \n /downloads/41223215 shooter.7z \n https://youtu.be/DddqK8xxv5s \xa0半成品模擬影片 \n https://youtu.be/5rvXEyfOqPw \xa0完成品模擬影片 \n https://youtu.be/EJ3XKhpBrUM \xa0webot製作 \n /downloads/shooter-2.7z 檔案 \n \n 過程\xa0 \n sovlespace繪製出零件 繪製出設計圖 再根據設計圖的形狀組配 \n 組配完進行拆解轉檔(obj)(拆解過程會把尺寸縮小0.01倍) \n 進入webot 建robot 建出三個子特徵 solid(base) 兩個hingejoint(一個進行組裝 一個鎖點) \n 組裝過程續注意座標軸(會根據你繪圖起始的地方做原點) 可以進入sovlespace進行測量 \n 測量鎖點點位 過程跟前面四連桿一樣 可以在過程中進行測試 看看點位有沒有準 \n 鎖好之後模擬(我有發現老師給的設計圖因為角度會讓球沒辦法射那麼遠 所以我自己改良了程式 在發射前程式會先畜力) \n 加入球體(shape) 給定物理性質 \n 加入地板(floor)\xa0 \n 加入籃框(我在畫籃框時 匯入webot有個問題 因為沒有轉檔(沒必要)所以尺寸是正常的100倍 所以我自己又改了老師的分解檔案 去掉拆開的部分 只保留鎖小跟轉檔的能力) \n 之後模擬就成功了\xa0 \n 以下為鎖小功能py檔 \n #!/usr/bin/env python\n# -*- coding: utf-8 -*-\n"""\nSTL to OBJ converter with scaling support\n"""\n\nimport struct\nimport numpy as np\nfrom pathlib import Path\n\nclass STLConverter:\n    def __init__(self, filename, scale=0.001):\n        self.filename = filename\n        self.scale = scale\n        self.is_binary = self._check_if_binary()\n        \n    def _check_if_binary(self):\n        with open(self.filename, \'rb\') as f:\n            header = f.read(5).decode(\'utf-8\', errors=\'ignore\')\n            return not header.startswith(\'solid\')\n    \n    def _read_binary_stl(self):\n        with open(self.filename, \'rb\') as f:\n            f.seek(80)\n            triangle_count = struct.unpack(\'I\', f.read(4))[0]\n            \n            triangles = []\n            normals = []\n            \n            for _ in range(triangle_count):\n                nx, ny, nz = struct.unpack(\'fff\', f.read(12))\n                normals.append([nx, ny, nz])\n                \n                triangle = []\n                for _ in range(3):\n                    x, y, z = struct.unpack(\'fff\', f.read(12))\n                    triangle.append([x * self.scale, y * self.scale, z * self.scale])\n                triangles.append(triangle)\n                \n                f.seek(2, 1)\n                \n        return np.array(triangles), np.array(normals)\n    \n    def _read_ascii_stl(self):\n        triangles = []\n        normals = []\n        current_triangle = []\n        \n        with open(self.filename, \'r\') as f:\n            for line in f:\n                line = line.strip()\n                if not line:\n                    continue\n                    \n                parts = line.split()\n                if not parts:\n                    continue\n                \n                if parts[0] == \'facet\' and parts[1] == \'normal\':\n                    normals.append([float(parts[2]), float(parts[3]), float(parts[4])])\n                elif parts[0] == \'vertex\':\n                    current_triangle.append([\n                        float(parts[1]) * self.scale,\n                        float(parts[2]) * self.scale,\n                        float(parts[3]) * self.scale\n                    ])\n                elif parts[0] == \'endfacet\':\n                    if current_triangle:\n                        triangles.append(current_triangle)\n                        current_triangle = []\n        \n        return np.array(triangles), np.array(normals)\n\n    def _write_mtl(self, filename, material_name):\n        with open(filename, \'w\', encoding=\'utf-8\') as f:\n            f.write(f"newmtl {material_name}\\n")\n            f.write("Ka 0.2 0.2 0.2\\n")\n            f.write("Kd 0.8 0.8 0.8\\n")\n            f.write("Ks 0.5 0.5 0.5\\n")\n            f.write("Ns 50.0\\n")\n            f.write("d 1.0\\n")\n            f.write("illum 2\\n")\n\n    def _write_obj(self, filename, triangles, normals):\n        vertex_dict = {}\n        vertex_list = []\n        normal_list = []\n        faces = []\n        \n        for triangle, normal in zip(triangles, normals):\n            face_indices = []\n            \n            for vertex in triangle:\n                vertex_tuple = tuple(vertex)\n                if vertex_tuple not in vertex_dict:\n                    vertex_dict[vertex_tuple] = len(vertex_list) + 1\n                    vertex_list.append(vertex)\n                face_indices.append(vertex_dict[vertex_tuple])\n            \n            normal_list.append(normal)\n            faces.append(face_indices)\n        \n        material_name = filename.stem\n        mtl_filename = filename.with_suffix(\'.mtl\')\n        \n        with open(filename, \'w\', encoding=\'utf-8\') as f:\n            f.write(f"mtllib {mtl_filename.name}\\n")\n            f.write(f"usemtl {material_name}\\n\\n")\n            \n            for v in vertex_list:\n                f.write(f"v {v[0]} {v[1]} {v[2]}\\n")\n            \n            for n in normal_list:\n                f.write(f"vn {n[0]} {n[1]} {n[2]}\\n")\n            \n            for i, face in enumerate(faces):\n                f.write(f"f {face[0]}//{i+1} {face[1]}//{i+1} {face[2]}//{i+1}\\n")\n        \n        self._write_mtl(mtl_filename, material_name)\n    \n    def convert(self, output_path):\n        if self.is_binary:\n            triangles, normals = self._read_binary_stl()\n        else:\n            triangles, normals = self._read_ascii_stl()\n        \n        output_path = Path(output_path)\n        output_path.parent.mkdir(parents=True, exist_ok=True)\n        self._write_obj(output_path, triangles, normals)\n        print(f"轉換完成：{output_path}")\n        print(f"材質檔：{output_path.with_suffix(\'.mtl\')}")\n\n# 使用範例\ntry:\n    input_stl = "籃框.stl"\n    output_obj = "output/籃框.obj"\n    scale = 0.005\n\n    converter = STLConverter(input_stl, scale=scale)\n    converter.convert(output_obj)\nexcept Exception as e:\n    print(f"錯誤: {e}")\n \n \n 以下為畜力控制器 \n from controller import Robot\nimport time\n\ndef run_robot():\n    # Create the Robot instance\n    robot = Robot()\n\n    # Get simulation time step\n    timestep = int(robot.getBasicTimeStep())\n\n    # Get motor and keyboard devices\n    motor = robot.getDevice(\'motor1\')\n    keyboard = robot.getKeyboard()\n    keyboard.enable(timestep)\n\n    # Convert degrees to radians\n    def deg2rad(deg):\n        return deg * 3.14159 / 180\n\n    # Set initial motor position to -5 degrees (蓄力)\n    motor.setPosition(deg2rad(-10))\n    # Wait for a short time (e.g., 1 second) to complete the back movement\n    for _ in range(int(300 / timestep)):  # wait ~1 second\n        if robot.step(timestep) == -1:\n            return\n\n    # Main control loop\n    while robot.step(timestep) != -1:\n        # Move to 38 degrees\n        motor.setPosition(deg2rad(38))\n\nif __name__ == "__main__":\n    run_robot()\n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Exam', 'text': '', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號 \n 繪製連桿 \n \n 連桿距離 \n \n 運轉 \n 運轉壓縮檔 :\xa0 /downloads/Exam1運轉.zip \n \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41223226 \n Exam2 \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號 \n 以下為exam3-1製作過程: \n 首先收尋到控制室>網路和網際網路>網路和共用中心的檢視網路狀態及工作>找到乙太網路>內容>找到IPv6> \n 以我的為範例 我的地址和dns為 ( IPv6地址是到 老師網站 找 ) \n 2001:288:6004:17:fff1:cd25:0000:b047 \n 修好後打開cmd\xa0 輸入webotsw --stream "你的HW1的wbt檔案位置" \n webotsw下面有序號1234對應到網址上數字 \n 打開後http://localhost:1234/index.html可以看到模擬程式 \n 這是我的 Connect to: ws://[2001:288:6004:17:fff1:cd25:0000:b047]:1234 \n 如果是要組員查看的話 改成組員的ipv6地址 \n \n \n 以下為exam3-2 製作過程: \n 首先先下載老師的七段顯示器進行修改,利用GPT了解程式碼功能,可在number = 235 更改數值,後面過程和exam3-1一樣瀏覽器檢視 \n \n \n 以下為exam3-3 製作過程: \n 這裡也是一樣用上面的方式開啟程式,利用老師給的.wbt來模擬,並到瀏覽器檢視 \n \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};